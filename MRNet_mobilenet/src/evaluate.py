#!/usr/bin/env python3.6
"""Calculates the average AUC score of the abnormality detection, ACL tear and
Meniscal tear tasks.

Usage:
  evaluate.py <valid_paths_csv> <preds_csv> <valid_labels_csv>
  evaluate.py (-h | --help)

General options:
  -h --help          Show this screen.

Arguments:
  <valid_paths_csv>    csv file listing paths to validation set, which needs to
                       be in a specific order - an example is provided as
                       valid-paths.csv in the root of the project
                       e.g. 'valid-paths.csv'
  <preds_csv>          csv file generated by src/predict.py
                       e.g. 'out_dir/predictions.csv'
  <valid_labels_csv>   csv file containing labels for the valid dataset
                       e.g. 'MRNet-v1.0/valid_labels.csv'
"""

import os
import sys
import csv
from docopt import docopt

import pandas as pd
import numpy as np

from sklearn import metrics


def main(valid_paths_csv, preds_csv, valid_labels_csv):
    print('Reporting AUC scores...')

    preds_df = pd.read_csv(preds_csv, header=None)
    valid_df = pd.read_csv(valid_labels_csv)

    old_case = None

    cases = []
    with open(valid_paths_csv, 'r') as paths:
        for path in paths:
            case = os.path.splitext(os.path.basename(path.strip()))[0]
            if case == old_case:
                next
            else:
                cases.append(case)
                old_case = case

    ys = []
    Xs = []

    for i, case in enumerate(cases):
        case_row = valid_df[valid_df.case == int(case)]

        y = case_row.values[0,1:].astype(np.float32)
        ys.append(y)

        X = preds_df.iloc[i].values
        Xs.append(X)

    ys = np.asarray(ys).transpose()
    Xs = np.asarray(Xs).transpose()

    aucs = {}

    diagnoses = valid_df.columns.values[1:]

    for i,diagnosis in enumerate(diagnoses):
        auc = metrics.roc_auc_score(ys[i], Xs[i])

        aucs[diagnosis] = auc

    aucs['avegare'] = np.array(list(aucs.values())).mean()

    for k, v in aucs.items():
        print(f'  {k}: {v:.3f}')


if __name__ == '__main__':
    arguments = docopt(__doc__)

    print('Parsing arguments...')

    main(arguments['<valid_paths_csv>'],
         arguments['<preds_csv>'],
         arguments['<valid_labels_csv>'])
